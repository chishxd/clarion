"""
This type stub file was generated by pyright.
"""

import os
import sys
from multiprocessing.resource_tracker import ResourceTracker as _ResourceTracker

if sys.platform == "win32":
    ...
__all__ = ["ensure_running", "register", "unregister"]
_HAVE_SIGMASK = ...
_IGNORED_SIGNALS = ...
_CLEANUP_FUNCS = ...
if os.name == "posix":
    ...
VERBOSE = ...
class ResourceTracker(_ResourceTracker):
    """Resource tracker with refcounting scheme.

    This class is an extension of the multiprocessing ResourceTracker class
    which implements a reference counting scheme to avoid unlinking shared
    resources still in use in other processes.

    This feature is notably used by `joblib.Parallel` to share temporary
    folders and memory mapped files between the main process and the worker
    processes.

    The actual implementation of the refcounting scheme is in the main
    function, which is run in a dedicated process.
    """
    def maybe_unlink(self, name, rtype): # -> None:
        """Decrement the refcount of a resource, and delete it if it hits 0"""
        ...
    
    def ensure_running(self): # -> None:
        """Make sure that resource tracker process is running.

        This can be run from any process.  Usually a child process will use
        the resource created by its parent."""
        ...
    
    def __del__(self): # -> None:
        ...
    


_resource_tracker = ...
ensure_running = ...
register = ...
maybe_unlink = ...
unregister = ...
getfd = ...
def main(fd, verbose=...):
    """Run resource tracker."""
    ...

def spawnv_passfds(path, args, passfds): # -> int:
    ...

